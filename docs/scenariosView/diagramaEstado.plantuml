@startuml
[*]-->Login
state Login{
    [*]-->State1
    State1:El usuario solicita iniciar el sistema
    State1-->State2
    State2:El sistema muestra pantalla
    State2:para introducir correo y contrase침a
    State2-->State3
    State3:El usuario introduce correo y contrase침a
    State3:e inicia sesion
    State3-->State4
    State4:El sistema valida las credenciales ingresadas
    State5:El sistema inicia sesion y muestra la pagina
    State5:correspondiente al actor
    A1:Si los datos ingresados por el usuario son incorrectos el sistema
    A1:deber치 informar del error e indicar que los introduzca de nuevo
    state validacion<<fork>>
    State4-->validacion
    validacion-->State5 :correctos
    validacion-->A1 :incorrectos
    A1-->State3
    State3->A2
    A2-->[*]:abortado
    A2:Si el Usuario decide cancelar el proceso termina el caso de uso sin hacer nada
    State5--->[*]:Ingresa
}

state RegistrarUsuario{
    [*]-->solicitaIncorporar
    solicitaIncorporar:El administrador solicita incorporar
    solicitaIncorporar:un estudiante
    solicitaIncorporar-->permiteDatos
    permiteDatos:el sistema permite introducir los datos
    permiteDatos:personales del estudiante
    introDatos:El administrador introduce nombre,apellido,
    introDatos:correo y contrase침a del estudiante
    permiteDatos-->introDatos
    muestraDatos:El sistema muestra los datos para que se verifiquen
    introDatos-->muestraDatos
    concluRegistro:El administrador concluye el registro
    muestraDatos---->concluRegistro :coinciden
    noCoinciden:Si el administrador verifica los datos estos no coinciden
    noCoinciden:el sistema permite retroceder para corregirlo
    muestraDatos--->noCoinciden
    noCoinciden-->introDatos
    cancelRegistro:Si el administrador decide cancelar el proceso
    cancelRegistro:termina el caso de uso sin hacer nada
    introDatos-->cancelRegistro
    cancelRegistro-->[*]:cancelado
    concluRegistro--->[*]:exitoso
}


state RegistrarCurso{
[*]-->solicitaRegistrar
solicitaRegistrar:El administrador solicita ingresar un curso
muestraCamposDeRegistro:El sistema permite introducir los campos categoria del curso
muestraCamposDeRegistro: ,nombre del curso y nombre de los profesores del curso
solicitaRegistrar-->muestraCamposDeRegistro
llenarCampos:El administradorllena los campos categoria del curso
llenarCampos:,nombre del curso, nombre de los profesores del curso y finaliza el registro
incluirCurso:El sistema inclute el curso a la lista de cursos y concluye el proceso
muestraCamposDeRegistro-->llenarCampos
state validarCurso <<fork>>
llenarCampos--->validarCurso
validarCurso-->incluirCurso :datosCorrectos
datosCursoIncorrectos:Si los datos ingresados por el administrador
datosCursoIncorrectos:  son incorrectos el sistema debera informar
datosCursoIncorrectos: el error e indicar que los introduzca de nuevo
validarCurso-->datosCursoIncorrectos :datosIncorrectos
datosCursoIncorrectos-->llenarCampos
cancelaRegistro:Si el administrador decide cancelar el proceso
cancelaRegistro:termina el caso de uso sin hacer nada
muestraCamposDeRegistro->cancelaRegistro
cancelaRegistro--->[*]:cancelado
incluirCurso-->[*]:exitoso

}

Login-->RegistrarUsuario
Login-->RegistrarCurso
@enduml