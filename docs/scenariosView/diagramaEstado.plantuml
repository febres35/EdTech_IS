@startuml "Diagrama de estado"
[*]-->Login
state Login{
    [*]-->State1
    State1:El usuario solicita iniciar el sistema
    State1-->State2
    State2:El sistema muestra pantalla
    State2:para introducir correo y contraseña
    State2-->State3
    State3:El usuario introduce correo y contraseña
    State3:e inicia sesion
    State3-->State4
    State4:El sistema valida las credenciales ingresadas
    State5:El sistema inicia sesion y muestra la pagina
    State5:correspondiente al actor
    A1:Si los datos ingresados por el usuario son incorrectos el sistema
    A1:deberá informar del error e indicar que los introduzca de nuevo
    state validacion<<fork>>
    State4-->validacion
    validacion-->State5 :correctos
    validacion-->A1 :incorrectos
    A1-->State3
    State3->A2
    A2-->[*]:abortado
    A2:Si el Usuario decide cancelar el proceso termina el caso de uso sin hacer nada
    State5--->[*]:Ingresa
}

state RegistrarUsuario{
    [*]-->solicitaIncorporar
    solicitaIncorporar:El administrador solicita incorporar
    solicitaIncorporar:un estudiante
    solicitaIncorporar-->permiteDatos
    permiteDatos:el sistema permite introducir los datos
    permiteDatos:personales del estudiante
    introDatos:El administrador introduce nombre,apellido,
    introDatos:correo y contraseña del estudiante
    permiteDatos-->introDatos
    muestraDatos:El sistema muestra los datos para que se verifiquen
    introDatos-->muestraDatos
    concluRegistro:El administrador concluye el registro
    muestraDatos---->concluRegistro :coinciden
    noCoinciden:Si el administrador verifica los datos estos no coinciden
    noCoinciden:el sistema permite retroceder para corregirlo
    muestraDatos--->noCoinciden
    noCoinciden-->introDatos
    cancelRegistro:Si el administrador decide cancelar el proceso
    cancelRegistro:termina el caso de uso sin hacer nada
    introDatos-->cancelRegistro
    cancelRegistro-->[*]:cancelado
    concluRegistro--->[*]:exitoso
}

state RegistrarCurso{
 [*]-->solicitaRegistrar
 solicitaRegistrar:El administrador solicita ingresar un curso
 muestraCamposDeRegistro:El sistema permite introducir los campos categoria del curso
 muestraCamposDeRegistro: ,nombre del curso y nombre de los profesores del curso
 solicitaRegistrar-->muestraCamposDeRegistro
 llenarCampos:El administradorllena los campos categoria del curso
 llenarCampos:,nombre del curso, nombre de los profesores del curso y finaliza el registro
 incluirCurso:El sistema inclute el curso a la lista de cursos y concluye el proceso
 muestraCamposDeRegistro-->llenarCampos
 state validarCurso <<fork>>
 llenarCampos--->validarCurso
 validarCurso-->incluirCurso :datosCorrectos
 datosCursoIncorrectos:Si los datos ingresados por el administrador
 datosCursoIncorrectos:  son incorrectos el sistema debera informar
 datosCursoIncorrectos: el error e indicar que los introduzca de nuevo
 validarCurso-->datosCursoIncorrectos :datosIncorrectos
 datosCursoIncorrectos-->llenarCampos
 cancelaRegistro:Si el administrador decide cancelar el proceso
 cancelaRegistro:termina el caso de uso sin hacer nada
 muestraCamposDeRegistro->cancelaRegistro
 cancelaRegistro--->[*]:cancelado
 incluirCurso-->[*]:exitoso
}

state seleccionarExamen{
    [*]-->solicitaExamen
    state presentaOcancel <<fork>>
    solicitaExamen:El estudiante solicita iniciar examen de practica
    muestraExamenDisponibles: El sistema muestra los tipos de examenes disponibles
    solicitaExamen-->muestraExamenDisponibles
    seleccionaExamenApracticar:El estudiante selecciona el tipo de examen que desea practicar
    muestraExamenDisponibles-->seleccionaExamenApracticar
    muestraInstrucciones:El sistema muestra las instrucciones del examen
    muestraInstrucciones:que eligio el estudiante
    aceptaInstrucciones:El estudiante acepta las instrucciones
    state aceptaInstruc <<fork>>
    muestraInstrucciones-->aceptaInstruc
    aceptaInstruc-->aceptaInstrucciones :acepta
    noAceptaInstruc:Si el estudiante al verificar las instrucciones
    noAceptaInstruc:no esta de acuerdo el sistema debe permitir declinar
    noAceptaInstruc: y retroceder en el proceso
    aceptaInstruc-->noAceptaInstruc :no acepta
    noAceptaInstruc-->seleccionaExamenApracticar
    cancelaExamen:Si el estudiante decide no practicar ningun examen
    cancelaExamen:termina el caso de uso sin hacer nada
    seleccionaExamenApracticar-->presentaOcancel
    presentaOcancel-->cancelaExamen :no presenta
    presentaOcancel-->muestraInstrucciones :ve instrucciones
    cancelaExamen---->[*]:cancela
}

state practicaExamen{
    
    [*]--->muestraExamen
    muestraExamen:El sistema muestra las preguntas y respuestas
    muestraExamen: del examen e inicia el cronometro
    seleccionaRespuesta:El estudiante selecciona la opcion
    seleccionaRespuesta:de respuesta a cada pregunta
    muestraExamen-->seleccionaRespuesta
    explicaRespuestas:El sistema muestra una breve explicacion de la respuesta
    state respondOreturn <<fork>>
    seleccionaRespuesta-->respondOreturn
    concluyeExamen:El estudiante concluye el examen
    cronometroEnd:Si el cronometro se detiene el sistema debe finalizar el examen
    state finalizaExamne <<join>>
    explicaRespuestas-->finalizaExamne :termino de responder
    cronometroEnd-->finalizaExamne :se acabo el cronometro
    finalizaExamne-->concluyeExamen
    retrocederEnP:Si el estudiante decide retroceder en las preguntas, el sistema
    retrocederEnP:deberá mostrar las preguntas anteriormente respondidas
   respondOreturn-->explicaRespuestas :termina de responder
   respondOreturn-->retrocederEnP :quiere ver preguntas anteriores
   retrocederEnP-->muestraExamen
}
 
state VerResultado{

  [*]-->mostrarRespuestas

  state mostrarRespuestas: El sistema muestra las respuestas del estudiante del último examen y su resultado
  state revisionResultado: El Estudiante revisa su resultado
  state cerrarResumen: El Estudiante solicita cerrar el resumen del resultado
  state guardarResumen: El Sistema cierra el resumen y guarda un resumen de los resultados
  state A1VerResultado: Si el Estudiante había seleccionado una respuesta incorrecta \nel sistema debe mostrar cuál era la respuesta correcta y una breve explicación de la respuesta


  mostrarRespuestas --> revisionResultado
  mostrarRespuestas --> A1VerResultado
  revisionResultado --> cerrarResumen
  cerrarResumen --> guardarResumen
  guardarResumen --> [*]

}

state CrearExamen{

    solicitaCrearExamen:El administrador solicita crear examen
    permiteIntroducirExamen:El sistema permite introducir los campos\ntipo, duracion, cantidad de preguntas,\npreguntas, respuestas y explicacion
    llenarCamposExamen:El administrador llena los campos
    finalizarCreacion:El administrador finaliza el proceso
    A1ErrorEnNumero:Si el adiministrador ingresa un numero de preguntas\nque no coincide con la cantidad de preguntas escogidas;\nentonces el sistema debe informar el error
    A2cancelarCreacion: Si el administrador decide cancelar el proceso\ntermina el caso de uso sin hacer nada
    [*]-->solicitaCrearExamen
    solicitaCrearExamen-->permiteIntroducirExamen
    permiteIntroducirExamen-->llenarCamposExamen
    state correctoUerror <<fork>>
    llenarCamposExamen-->correctoUerror
    correctoUerror-->finalizarCreacion :datos correctos
    correctoUerror-->A1ErrorEnNumero :datos incorrectos
    A1ErrorEnNumero-->llenarCamposExamen
    permiteIntroducirExamen-->A2cancelarCreacion
    A2cancelarCreacion-->[*]
    finalizarCreacion-->[*] :examen creado
}

state ConsultarAyuda{

  state solicitaAyuda: El Estudiante solicita consultar Ayuda
  state preguntasFrecuentes: El Sistema muestra preguntas frecuentes
  state preguntaProblema: El Estudiante selecciona \nla pregunta que se le asemeje a su problema
  state respuestaProblema: El Sistema muestra la respuesta \na la pregunta seleccionada por el Estudiante
  state terminaConsulta: El Estudiante verifica la respuesta y  \ntermina el proceso de consulta
  state A1ConsultarAyuda:  Si la pregunta que a la que el Estudiante desea hallar \nsolución no se encuentra listada, el sistema creará una consulta al administrador
  state A2ConsultarAyuda: Si el Estudiante decide cancelar el proceso termina el caso de uso sin hacer nada

  [*]-->solicitaAyuda
  [*]--> A2ConsultarAyuda

  A2ConsultarAyuda -->[*]

  solicitaAyuda-->preguntasFrecuentes
  preguntasFrecuentes-->preguntaProblema
  preguntaProblema-->respuestaProblema
  preguntaProblema-->A1ConsultarAyuda
  A1ConsultarAyuda-->[*]
  respuestaProblema-->terminaConsulta
  terminaConsulta-->[*]

}

state Logout{
  state solicitaLogout: El Usuario solicita cerrar sesión
  state confirmarCerrarSesion: El Sistema muestra un mensaje de confirmación de cerrar la sesión
  state confirmaMensaje: El Usuario confirma el mensaje
  state sistemaCerrarSesion: El Sistema cierra la sesión del Usuario
  state A1Logout: Si el usuario no confirma el mensaje, la sesión continuará activa

  [*]-->solicitaLogout

  solicitaLogout-->confirmarCerrarSesion
  confirmarCerrarSesion-->confirmaMensaje
  confirmaMensaje--> A1Logout
  A1Logout->[*]
  confirmaMensaje-->sistemaCerrarSesion
}

state ActualizarPerfil{
  state solicitaActualizarPerfil: El Usuario solicita actualizar información de su perfil
  state actualizarDatos: El Sistema muestra pantalla para la \nactualización de correo y/o contraseña del usuario
  state introduceNuevosDatos: El Usuario introduce su nuevo correo y/o nueva contraseña
  state validarInfoIngresada: El sistema valida la información ingresada
  state finalizarActualizacion: El sistema actualiza el nuevo correo y/o password \ny muestra un mensaje de éxito
  state A1ActualizarPerfil: Si la dirección de correo electrónico del usuario ya está en uso, el sistema le mostrará un mensaje de error \ny le pedirá que ingrese una dirección de correo electrónico diferente
  state A2ActualizarPerfil: Si la nueva contraseña ingresada no cumple los requisitos mínimos de formato \nel sistema mostrará un mensaje de error y solicitará el ingreso de contraseña nuevamente

  [*]-->solicitaActualizarPerfil

  solicitaActualizarPerfil --> actualizarDatos
  actualizarDatos --> introduceNuevosDatos
  introduceNuevosDatos--> validarInfoIngresada
  validarInfoIngresada --> A1ActualizarPerfil
  A1ActualizarPerfil --> actualizarDatos
  validarInfoIngresada --> A2ActualizarPerfil
  A2ActualizarPerfil --> actualizarDatos
  validarInfoIngresada --> finalizarActualizacion
  finalizarActualizacion --> [*]

}

concluyeExamen-->VerResultado
aceptaInstrucciones--->practicaExamen
Login-->RegistrarUsuario
Login-->RegistrarCurso
Login--->seleccionarExamen
Login-->CrearExamen
Login->ConsultarAyuda
Login-->ActualizarPerfil
Login-->Logout
sistemaCerrarSesion-->[*]
@enduml